postgreSQL-app-name: newsletter

quarkus:
  banner:
    path: banner.txt
  # datasource configuration
  datasource:
    db-kind: postgresql
    username: ${DB_JDBC_USER:postgres}
    password: ${DB_JDBC_PASSWORD:postgres}
    jdbc:
      url: ${DB_JDBC_URL:jdbc:postgresql://localhost:5432/newsletter?ApplicationName=${postgreSQL-app-name}}
  hibernate-orm:
    database:
      generation: validate
  http:
    cors:
      ~: true
      origins: /.*/
    port: ${PORT:8620}
    test-port: 8083
    auth:
      policy:
        role-policy-admin:
          roles-allowed: ADMIN
      permission:
        basic-or-bearer:
          policy: authenticated
        #adiciona autenticação de ADMIN para todos os métodos depois de /api/...
        role-admin:
          policy: role-policy-admin
          paths: ${quarkus.http.root-path}/*
        #remove autenticação dos métodos contidos no paths
        public:
          paths: ${quarkus.http.root-path}/login,
                 ${quarkus.http.root-path}/user,
                 ${quarkus.http.root-path}/user/exists,
                 ${quarkus.http.root-path}/user/send-code-recover-password/username/*,
                 ${quarkus.http.root-path}/user/recover-password,
                 ${quarkus.http.root-path}/swagger/*,
                 ${quarkus.http.root-path}/q/openapi/*,
                 ${quarkus.http.root-path}/v1/email/self-registration,
                 ${quarkus.http.root-path}/v1/email/unsubscribe,
          policy: permit
    resteasy:
      gzip:
        enabled: true
        max-input: 10M
    smallrye-jwt:
      enabled: true
    root-path: /api
  flyway:
    migrate-at-start: true
    baseline-on-migrate: true
    locations: db/migration
    placeholders:
      public_schema: public
  hibernate-validator:
    method-validation: none
  swagger-ui:
    always-include: true
    path: ${quarkus.http.root-path}/swagger
    enable: true
  quartz:
    # jdbc-cmt é para deixar que quem esteja usando o quartz, no caso o ambiente que ele está rodando,
    # gerencie as transações (por exemplo o quarkus).
    # jdbc-tx faz com que o próprio quartz gerencie as transações, independente de qual ambiente está,
    # ele que fará o commit, rollback, etc.
    # Se utilizar o jdbc-tx, por exemplo ao tentar agendar a tarefa no service, ocorrerá erro porque o quartz tenta fazer
    # commit fora da transação que já está rodando para gravar a entidade NewsletterQuartzTasks,
    # já com o jdbc-cmt o quartz deixa que seja salvo na mesma transação que já está rodando para gravar o registro.
    store-type: jdbc-cmt
    clustered: false
    misfire-policy:
      task-job: ignore-misfire-policy

#Informacoes locais do jwt
jwt-newsletter:
# TODO: Para deixar o access token com 15 minutos de expiração é necessário implementar um refresh token para o usuário não precisar toda vez fazer login
#  duration: 900 # 15 minutos
  duration: 604800 # 7 dias
  password:
    iteration: 33
    keylength: 256
    secret: newsletter
  publickey-location: /jwt-key/publickey.pem
  privatekey-location: /jwt-key/privatekey.pem

newsletter:
  dns: newsletter.jwt

mp:
  jwt:
    verify:
      issuer: ${newsletter.dns}
      publickey:
        location: ${jwt-newsletter.publickey-location}
